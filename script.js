// --- –ñ–∞“õ—Å–∞—Ä—Ç—ã–ª“ì–∞–Ω –æ–π—ã–Ω –ª–æ–≥–∏–∫–∞—Å—ã ---
// –†–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä, –ø–µ—Ä—Å–æ–Ω–∞–∂ –±—ñ—Ä —Ä–∞—É–Ω–¥—Ç–∞ —Ç“±—Ä–∞“õ—Ç—ã, —Ç–∞–π–º–µ—Ä —Ç–µ–∫—Å—Ç—É –∂–æ“£–≥–∞—Ä—Ç—ã–ª“ì–∞–Ω, –∫–∞—Å—Ç–æ–º–Ω—ã–π –¥–∏–∞–ª–æ–≥

defineCharacters = () => ({
    7: {
        1: ["–ë–∞—É—ã—Ä–∂–∞–Ω –ú–æ–º—ã—à“±–ª—ã","“ö—ã–∑—Ç—É–º–∞—Å ”ô–∂–µ","–ó–∏—è—à –∞–Ω–∞—Å—ã","–ó–∏—è—à –∞—Ç–∞—Å—ã","–ú–æ–º—ã–Ω“õ“±–ª","–°–µ—Ä–∫–µ–±–∞–π"],
        2: ["–ñ—É–∞–Ω“õ“±–ª","–ê—Ö–º–µ—Ç","–ë–∞–π—à—ã–Ω–∞—Ä –∞“ì–∞—à—ã","“ö–∞–±–∞—Å–∞“õ–∞–ª","–ö–µ–Ω–∂–µ–≥“Ø–ª"],
        3: ["–ö”©–∫—Å–µ—Ä–µ–∫","“ö“±—Ä–º–∞—à","–•–∞—Å–µ–Ω","“ö“±—Ä–º–∞—à—Ç—ã“£ ”ô–∂–µ—Å—ñ","–î–∞—Å—Ç–∞–Ω","–¢–∞—Å—Ç–∞–Ω","–î–æ—Å–±–æ–ª –∞“ì–∞–π","–¢–æ“õ—Ç–∞—Ä–æ–≤ (–∏–Ω—Å–ø–µ–∫—Ç–æ—Ä)","–ë–µ–∫–µ–Ω","–†–∞—É–∞–Ω","“ö–æ–∂–∞–π—ã–Ω"],
        4: ["”ò–π—Ç–µ–∫–µ –±–∏","“ö–∞–∑—ã–±–µ–∫ –±–∏","“ö–æ–ª–¥–∞–Ω –±–æ—à–∞“õ—Ç—É —Ö–∞–Ω","–ú–∞–π“õ—ã –±–∏","“ö–æ–∑—ã","–ë–∞—è–Ω","“ö–∞—Ä–∞–±–∞–π","–ñ—ã–Ω—Ç—ã“õ","“ö–æ–¥–∞—Ä","–ö“Ø–Ω—ñ–∫–µ–π","–ú–∞“õ–±–∞–ª"]},
    8: {
        1: ["–û—Ä–∞–ª—Ö–∞–Ω–Ω—ã“£ ”ô–ø–∫–µ—Å—ñ","–û—Ä–∞–ª—Ö–∞–Ω–Ω—ã“£ ”ô–∂–µ—Å—ñ","–ë”©–∫–µ–π","–û—Ä–∞–ª—Ö–∞–Ω –ë”©–∫–µ–π","“ö–∞—à—ã–±–∞–π","–ö“Ø–ª–∏—è (–û—Ä–∞–ª—Ö–∞–Ω–Ω—ã“£ –∞–Ω–∞—Å—ã)","–•–∞—á–∏–∫–æ","–ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä –£—ç–Ω–æ","–ô–æ—à–∏–∫–∞–≤–∞","–¢–∞–∫–∞—Ö–∞—à–∏ —Ö–∞–Ω—ã–º","–ô–æ—Å—É–æ","–ô–æ—Å—É–æ–Ω—ã“£ ”ô–∫–µ—Å—ñ"],
        2: ["–í–æ–ª–æ–¥—è –∫–æ–≤–±–æ–π","–ñ–µ“£—ñ—Å-–±–µ–ª–∞—Ä—É—Å—å","–°–∞—à–∞-—à–≤–µ–¥","–ü–æ–ª–∏–Ω–∞","–¢”©–ª–µ–≥–µ–Ω (–¢–æ–ª—è, –∂–∞–∑—É—à—ã)","–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ù–∏–∫–∏—Ç–∏—á–Ω–∞","–¢–æ–º –ö–µ–Ω—Ç–∏","–ü—ñ—Ä–∞–¥–∞—Ä-–≠–Ω–¥—Ä—é","–≠–¥—É–∞—Ä–¥ –¢—é–¥–æ—Ä","“ö–∞–ª–º–∞“õ “õ—ã–∑—ã","–ù–æ—è–Ω","–ë–∞—Ç—ã—Ä –ë–∞—è–Ω","“∞—Å–∞","–°–µ—Ä–µ–Ω","“ö–∞–Ω–∞–π –±–∏","–ê–±—ã–ª–∞–π —Ö–∞–Ω"],
        3: ["–ê–Ω–∞","–ê—É—Ä—É –±–∞–ª–∞","”ò–∫–µ","–ê“£—à—ã –∞—Ç–∞","–¢”ô—É—ñ–ø —à–∞–ª","–õ”ô–π–ª”ô","“ö“±–º–∞—Ä","“ö–∞—Ç–∏—Ä–∞ —Ç”ô—Ç–µ","–•–∞–Ω—à–∞–π—ã–º","–î—é–ø–µ–Ω","–•–∞–Ω–¥–∏ –ø—ñ–ª","–î–æ–∫—Ç–æ—Ä –ö—ç–ª—å–≤–∏–Ω","–•–∏–ø–ø–∏","–†–æ–±–æ—Ç-—Ç–æ–Ω–∞—É—à—ã","–î–∂–∏–º –î–∏–≥—Ä–∏–∑","–•–∞–Ω—à–∞–π—ã–º","–î–æ–∫—Ç–æ—Ä –î–æ–Ω–æ–≤–∞"],
        4: ["–ê–±–∞–π “ö“±–Ω–∞–Ω–±–∞–µ–≤","–ê“õ–∞–Ω —Å–µ—Ä—ñ","“ö“±–ª–∞–≥–µ—Ä","–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–Ω–∞","–ê–π—Ç–ø–∞–π","“ö“±–ª—Ç—É–º–∞","–ñ–∞—Ä—ã–ª“ì–∞–ø–±–µ—Ä–¥—ñ","–ê–ª–∞—à–∞–±—ã—Ä —Ö–∞–Ω","–ê–π–∫“Ø–Ω—ñ–º"]
    }
});

const roundTimes = [300, 240, 180, 120, 60]; // —Å–µ–∫—É–Ω–¥
const roundScores = [10, 8, 6, 4, 2];

let ch, cls, term, deck, currentChar;
let playerNames = [], playerScores = [];
let currentPlayerIdx = 0, round = 1, score = 0, timer = null, timeLeft = 0, timerRunning = false;

const setup = document.getElementById("setup");
const playerSetup = document.getElementById("playerSetup");
const game = document.getElementById("game");
const results = document.getElementById("results");
const classSel = document.getElementById("classSelect");
const termSel = document.getElementById("termSelect");
const startBtn = document.getElementById("startBtn");
const addPlayerBtn = document.getElementById("addPlayerBtn");
const playerNameInput = document.getElementById("playerName");
const playersList = document.getElementById("playersList");
const playerCount = document.getElementById("playerCount");
const startGameBtn = document.getElementById("startGameBtn");
const backToSetupBtn = document.getElementById("backToSetupBtn");
const clearAllBtn = document.getElementById("clearAllBtn");
const currentPlayerName = document.getElementById("currentPlayerName");
const playerTurn = document.getElementById("playerTurn");
const roundHeader = document.getElementById("roundHeader");
const timerDisplay = document.getElementById("timerDisplay");
const charBox = document.getElementById("character");
const revealBtn = document.getElementById("revealBtn");
const startTimerBtn = document.getElementById("startTimerBtn");
const guessedBtn = document.getElementById("guessedBtn");
const nextRoundBtn = document.getElementById("nextRoundBtn");
const currentPoints = document.getElementById("currentPoints");
const scoreTableBody = document.getElementById("scoreTableBody");
const newGameBtn = document.getElementById("newGameBtn");
const changePlayersBtn = document.getElementById("changePlayersBtn");

// –ö–∞—Å—Ç–æ–º–Ω—ã–π –¥–∏–∞–ª–æ–≥ —ç–ª–µ–º–µ–Ω—Ç—ã
const customConfirm = document.getElementById("customConfirm");
const confirmMessage = document.getElementById("confirmMessage");
const confirmYes = document.getElementById("confirmYes");
const confirmNo = document.getElementById("confirmNo");

// --- –ö–∞—Å—Ç–æ–º–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Ñ—É–Ω–∫—Ü–∏—è ---
function showCustomConfirm(message, callback) {
    confirmMessage.textContent = message;
    customConfirm.classList.remove('hidden');
    
    confirmYes.onclick = () => {
        customConfirm.classList.add('hidden');
        callback(true);
    };
    
    confirmNo.onclick = () => {
        customConfirm.classList.add('hidden');
        callback(false);
    };
}

// --- LocalStorage —Ñ—É–Ω–∫—Ü–∏—è–ª–∞—Ä—ã ---
function savePlayersToStorage() {
    localStorage.setItem('gamePlayerNames', JSON.stringify(playerNames));
}

function loadPlayersFromStorage() {
    const saved = localStorage.getItem('gamePlayerNames');
    if (saved) {
        playerNames = JSON.parse(saved);
        playerScores = new Array(playerNames.length).fill(0);
        updatePlayersList();
    }
}

function updatePlayersList() {
    playersList.innerHTML = "";
    playerNames.forEach((name, index) => {
        let li = document.createElement('li');
        li.innerHTML = `
            <span class="player-name">${name}</span>
            <button class="btn btn-danger" onclick="removePlayer(${index})">üóëÔ∏è</button>
        `;
        playersList.appendChild(li);
    });
    playerCount.textContent = playerNames.length;
    startGameBtn.disabled = playerNames.length < 2;
}

function removePlayer(index) {
    playerNames.splice(index, 1);
    playerScores.splice(index, 1);
    updatePlayersList();
    savePlayersToStorage();
}

// --- –ë–µ—Ç—Ç—ñ“£ –∂“Ø–∫—Ç–µ–ª—É—ñ ---
window.onload = () => {
    loadPlayersFromStorage();
}

// --- –≠—Ç–∞–ø 1: –∫–ª–∞—Å—Å/—Ç–æ“õ—Å–∞–Ω —Ç–∞“£–¥–∞—É ---
startBtn.onclick = () => {
    cls = classSel.value;
    term = termSel.value;
    setup.classList.add('hidden');
    playerSetup.classList.remove('hidden');
}

backToSetupBtn.onclick = () => {
    playerSetup.classList.add('hidden');
    setup.classList.remove('hidden');
}

// --- –≠—Ç–∞–ø 2: –æ–π—ã–Ω—à—ã–ª–∞—Ä–¥—ã –±–∞—Å“õ–∞—Ä—É ---
playerNameInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
        addPlayerBtn.click();
    }
});

addPlayerBtn.onclick = () => {
    let name = playerNameInput.value.trim();
    if (!name || playerNames.includes(name)) return;
    
    playerNames.push(name);
    playerScores.push(0);
    updatePlayersList();
    savePlayersToStorage();
    playerNameInput.value = "";
    playerNameInput.focus();
};

// –ö–∞—Å—Ç–æ–º–Ω—ã–π –¥–∏–∞–ª–æ–≥ –≤–º–µ—Å—Ç–æ confirm
clearAllBtn.onclick = () => {
    showCustomConfirm('–ë–∞—Ä–ª—ã“õ –æ–π—ã–Ω—à—ã–ª–∞—Ä–¥—ã –∂–æ—é –∫–µ—Ä–µ–∫ –ø–µ?', (result) => {
        if (result) {
            playerNames = [];
            playerScores = [];
            updatePlayersList();
            savePlayersToStorage();
        }
    });
};

startGameBtn.onclick = () => {
    playerSetup.classList.add('hidden');
    game.classList.remove('hidden');
    currentPlayerIdx = 0;
    // Reset all scores
    playerScores = new Array(playerNames.length).fill(0);
    nextPlayer();
};

function shuffle(arr) {
    return arr.map(v=>({v, sort:Math.random()})).sort((a,b)=>a.sort-b.sort).map(({v})=>v);
}

function randomCharacter(characters) {
    const randomIndex = Math.floor(Math.random() * characters.length);
    return characters[randomIndex];
}

// --- –û–π—ã–Ω –ª–æ–≥–∏–∫–∞—Å—ã ---
function nextPlayer() {
    ch = defineCharacters();
    deck = shuffle([...ch[cls][term]]);
    score = 0;
    round = 1;
    timerRunning = false;
    currentPlayerName.textContent = playerNames[currentPlayerIdx];
    playerTurn.textContent = `${currentPlayerIdx+1}/${playerNames.length}`;
    
    // –ñ–∞“£–∞ –æ–π—ã–Ω—à—ã “Ø—à—ñ–Ω –∂–∞“£–∞ –∫–µ–π—ñ–ø–∫–µ—Ä —Ç–∞“£–¥–∞—É
    currentChar = randomCharacter(deck);
    
    startRound();
}

function startRound() {
    if (round > 5) {
        // –ï–≥–µ—Ä 5 —Ä–∞—É–Ω–¥—Ç–∞ —Ç–∞–ø–ø–∞—Å–∞
        endTurn();
        return;
    }
    
    // –¢–µ–∫ 1-—Ä–∞—É–Ω–¥—Ç–∞ “ì–∞–Ω–∞ –∂–∞“£–∞ –∫–µ–π—ñ–ø–∫–µ—Ä —Ç–∞“£–¥–∞—É
    if (round === 1 && currentChar === undefined) {
        currentChar = randomCharacter(deck);
    }
    // 2-5 —Ä–∞—É–Ω–¥—Ç–∞—Ä–¥–∞ –∫–µ–π—ñ–ø–∫–µ—Ä —Å–æ–ª –±–æ–π—ã–Ω—à–∞ “õ–∞–ª–∞–¥—ã
    
    roundHeader.textContent = `${round}-—Ä–∞—É–Ω–¥ / 5`;
    charBox.textContent = currentChar;
    charBox.classList.add("hidden-text");
    
    // –ö–Ω–æ–ø–∫–∞–ª–∞—Ä–¥—ã –±–∞–ø—Ç–∞—É
    revealBtn.disabled = false;
    startTimerBtn.disabled = false;
    startTimerBtn.textContent = "‚è∞ –¢–∞–π–º–µ—Ä–¥—ñ –±–∞—Å—Ç–∞—É"; // –ú”ô—Ç—ñ–Ω–¥—ñ “õ–∞–ª–ø—ã–Ω–∞ –∫–µ–ª—Ç—ñ—Ä—É
    guessedBtn.disabled = true;
    nextRoundBtn.disabled = true;
    
    // –¢–∞–π–º–µ—Ä–¥—ñ –±–∞–ø—Ç–∞—É
    timeLeft = roundTimes[round-1];
    timerRunning = false;
    updateTimerDisplay();
    timerDisplay.className = "timer-display";
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ä–∞—É–Ω–¥–æ–≤
    const roundDescriptions = [
        "–µ“£ “õ–∏—ã–Ω —Å“±—Ä–∞“õ—Ç–∞—Ä",
        "–Ω–∞“õ—Ç—ã–ª–∞—É —Å“±—Ä–∞“õ—Ç–∞—Ä—ã", 
        "–æ“õ–∏“ì–∞ –∂–µ–ª—ñ—Å—ñ –±–æ–π—ã–Ω—à–∞",
        "–∫–µ–π—ñ–ø–∫–µ—Ä–¥—ñ“£ ”ô—Ä–µ–∫–µ—Ç—ñ/–º—ñ–Ω–µ–∑—ñ",
        "–∂–µ“£—ñ–ª —Å–∏–ø–∞—Ç—Ç–∞–º–∞"
    ];
    
    currentPoints.textContent = `–ê“ì—ã–º–¥–∞“ì—ã —Ä–∞—É–Ω–¥: ${roundScores[round-1]} “±–ø–∞–π ‚Ä¢ ${roundDescriptions[round-1]} (${Math.floor(timeLeft/60)} –º–∏–Ω)`;
    
    if (timer) {
        clearInterval(timer);
        timer = null;
    }
}

function startTimer() {
    if (timerRunning) return;
    
    timerRunning = true;
    timerDisplay.classList.add("running");
    startTimerBtn.disabled = true;
    
    timer = setInterval(() => {
        timeLeft--;
        updateTimerDisplay();
        
        if (timeLeft <= 0) {
            clearInterval(timer);
            timerDisplay.classList.remove("running");
            timerDisplay.classList.add("danger");
            guessedBtn.disabled = true;
            nextRoundBtn.disabled = false;
            startTimerBtn.textContent = "‚è∞ –£–∞“õ—ã—Ç –±—ñ—Ç—Ç—ñ!";
            startTimerBtn.disabled = true;
        } else if (timeLeft <= 30) {
            timerDisplay.classList.add("warning");
        }
    }, 1000);
}

function updateTimerDisplay() {
    let m = Math.floor(timeLeft / 60);
    let s = timeLeft % 60;
    timerDisplay.textContent = `${m}:${s.toString().padStart(2, "0")}`;
}

revealBtn.onclick = () => {
    charBox.classList.remove("hidden-text");
    guessedBtn.disabled = false;
};

startTimerBtn.onclick = () => {
    startTimer();
};

guessedBtn.onclick = () => {
    if (timer) clearInterval(timer);
    timerRunning = false;
    
    // –ï–≥–µ—Ä —É–∞“õ—ã—Ç —ñ—à—ñ–Ω–¥–µ —Ç–∞–ø—Å–∞
    playerScores[currentPlayerIdx] += roundScores[round-1];
    nextPlayerTurn();
};

nextRoundBtn.onclick = () => {
    round++;
    startRound();
};

function endTurn() {
    if (timer) clearInterval(timer);
    timerRunning = false;
    // –ï–≥–µ—Ä 5 —Ä–∞—É–Ω–¥—Ç–∞ –¥–∞ —Ç–∞–±–∞ –∞–ª–º–∞—Å–∞ - 0 –±–∞–ª–ª
    nextPlayerTurn();
}

function nextPlayerTurn() {
    game.classList.add('hidden');
    
    if (currentPlayerIdx + 1 < playerNames.length) {
        currentPlayerIdx++;
        // –ö–µ–ª–µ—Å—ñ –æ–π—ã–Ω—à—ã “Ø—à—ñ–Ω –∫–µ–π—ñ–ø–∫–µ—Ä–¥—ñ –∞–Ω—ã“õ—Ç–∞–º–∞—É (nextPlayer —Ñ—É–Ω–∫—Ü–∏—è—Å—ã–Ω–¥–∞ –æ—Ä—ã–Ω–¥–∞–ª–∞–¥—ã)
        currentChar = undefined;
        setTimeout(() => {
            game.classList.remove('hidden');
            nextPlayer();
        }, 700);
    } else {
        showResults();
    }
}

function showResults() {
    results.classList.remove('hidden');
    
    let sorted = playerNames.map((name, i) => ({name, score: playerScores[i]}))
        .sort((a, b) => b.score - a.score);
    
    scoreTableBody.innerHTML = "";
    sorted.forEach((p, i) => {
        let tr = document.createElement('tr');
        tr.innerHTML = `<td>${i+1}</td><td>${p.name}</td><td>${p.score}</td>`;
        scoreTableBody.appendChild(tr);
    });
}

newGameBtn.onclick = () => {
    results.classList.add('hidden');
    setup.classList.remove('hidden');
    
    // –¢–µ–∫ –æ–π—ã–Ω–¥—ã —ã—Å—ã—Ä—É, –æ–π—ã–Ω—à—ã–ª–∞—Ä “õ–∞–ª–∞–¥—ã
    currentPlayerIdx = 0;
    currentChar = undefined;
    if (timer) clearInterval(timer);
    timerRunning = false;
};

changePlayersBtn.onclick = () => {
    results.classList.add('hidden');
    playerSetup.classList.remove('hidden');
};
// --- –ñ–∞“õ—Å–∞—Ä—Ç—ã–ª“ì–∞–Ω –æ–π—ã–Ω –ª–æ–≥–∏–∫–∞—Å—ã ---
// –†–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä, –ø–µ—Ä—Å–æ–Ω–∞–∂ –±—ñ—Ä —Ä–∞—É–Ω–¥—Ç–∞ —Ç“±—Ä–∞“õ—Ç—ã, —Ç–∞–π–º–µ—Ä —Ç–µ–∫—Å—Ç—É –∂–æ“£–≥–∞—Ä—Ç—ã–ª“ì–∞–Ω

defineCharacters = () => ({
  7: {1:["–ë–∞—É—ã—Ä–∂–∞–Ω –ú–æ–º—ã—à“±–ª—ã","–ú–æ–º—ã–Ω–∞–ª—ã (–ú–æ–º—ã—à)","“ö—ã–∑—Ç—É–º–∞—Å","–†”ô–∑–∏—è (–ë–∞—É—ã—Ä–∂–∞–Ω–Ω—ã“£ –∞–Ω–∞—Å—ã)","“ö–æ–∑—ã","–ë–∞—è–Ω —Å“±–ª—É","“ö–∞—Ä–∞–±–∞–π","–°–∞—Ä—ã–±–∞–π","“ö–æ–¥–∞—Ä","–ê–π–±–∞—Å"],2:["–ï—Ä –¢”©—Å—Ç—ñ–∫","–ê—Å–∞–Ω “ö–∞–π“ì—ã","–ö–µ–Ω–µ—Å–∞—Ä—ã"],3:["–¢”©–ª–µ–≥–µ–Ω","–°–∞–Ω—Å—ã–∑–±–∞–π","–ë–µ–∫–µ–∂–∞–Ω"],4:["–ë–∞—Ç—ã—Ä –ë–∞—è–Ω","–ï—Ä –¢–∞—Ä“ì—ã–Ω","“ö–æ—Ä“õ—ã—Ç"]},
  8: {1:["–ê–±–∞–π","–ê–π–≥–µ—Ä—ñ–º","–ö”©–∂–µ–∫ –ñ–∏—Ä–µ–Ω—à–µ"],2:["–ú–∞—Ö–∞–º–±–µ—Ç","–ò—Å–∞—Ç–∞–π","–°—ã—Ä—ã–º –±–∞—Ç—ã—Ä"],3:["–®–æ“õ–∞–Ω –£”ô–ª–∏—Ö–∞–Ω–æ–≤","–´–±—ã—Ä–∞–π –ê–ª—Ç—ã–Ω—Å–∞—Ä–∏–Ω","–°”ô–∫–µ–Ω –°–µ–π—Ñ—É–ª–ª–∏–Ω"],4:["–ú—ã—Ä–∂–∞“õ—ã–ø –î—É–ª–∞—Ç–æ–≤","–ú“±—Ö—Ç–∞—Ä ”ò—É–µ–∑–æ–≤","–ú–∞–≥–∂–∞–Ω –ñ“±–º–∞–±–∞–µ–≤"]},
  9:{1:["–ö–µ–Ω–µ—Å–∞—Ä—ã","–ñ”ô–Ω—ñ–±–µ–∫ —Ö–∞–Ω","–ê–±—ã–ª–∞–π —Ö–∞–Ω"],2:["“ö–∞—Ä–∞–≥”©–∑","“ö–∞—Ä–∞—à–∞—à","“ö–æ–¥–∞—Ä"],3:["–ñ–µ—Ç—ñ–º –ö–µ–∫—ñ–ª","–ñ“Ø–∑ –ñ—ã–ª–¥—ã“õ –ñ–∞–ª“ì—ã–∑–¥—ã“õ","–°“±–ª—Ç–∞–Ω –ë–µ–π–±–∞—Ä—ã—Å"],4:["“ö–æ—Ä“õ—ã—Ç","”ò–ª–∏—Ö–∞–Ω –ë”©–∫–µ–π—Ö–∞–Ω","–ê—Ö–º–µ—Ç –ë–∞–π—Ç“±—Ä—Å—ã–Ω“±–ª—ã"]},
  10:{1:["–Ü–ª—å—è—Å –ï—Å–µ–Ω–±–µ—Ä–ª–∏–Ω","“ö–∞“ª–∞—Ä","–ñ–∞–Ω—Ç–∞–ª–∞—Å"],2:["“í–∞–±–∏—Ç –ú“Ø—Å—ñ—Ä–µ–ø–æ–≤","–ì“Ø–ª–Ω–∞—Ä","“ö–æ–∑—ã –ö”©—Ä–ø–µ—à"],3:["–û–ª–∂–∞—Å –°“Ø–ª–µ–π–º–µ–Ω–æ–≤","–ê–∑–∏ –∂”ô–Ω–µ –Ø"],4:["–¢—ã–Ω—ã—à—Ç—ã“õ–±–µ–∫ ”ò–±–¥—ñ–∫”ô–∫—ñ–º“±–ª—ã","“ö–∞—Ä–∞—Ç–∞—Å—Ç–∞–Ω"]},
  11:{1:["–†–æ–ª–ª–∞–Ω –°–µ–π—Å–µ–Ω–±–∞–µ–≤","–ê–º–∞–Ω–≥–µ–ª–¥—ñ –ò–º–∞–Ω–æ–≤"],2:["–î—É–ª–∞—Ç –ò—Å–∞–±–µ–∫–æ–≤","–ë–∞—Ç—ã—Ä—Ö–∞–Ω"],3:["”ò—Å–µ—Ç –ù–∞–π–º–∞–Ω–±–∞–π“±–ª—ã","–ñ–∞–º–±—ã–ª –ñ–∞–±–∞–µ–≤"],4:["–§–∞—Ä–∏–∑–∞ –û“£“ì–∞—Ä—Å—ã–Ω–æ–≤–∞","–®”ô–º—à—ñ “ö–∞–ª–¥–∞—è“õ–æ–≤"]}
});

const roundTimes = [300, 240, 180, 120, 60]; // —Å–µ–∫—É–Ω–¥
const roundScores = [10, 8, 6, 4, 2];

let ch, cls, term, deck, currentChar;
let playerNames = [], playerScores = [];
let currentPlayerIdx = 0, round = 1, score = 0, timer = null, timeLeft = 0, timerRunning = false;

const setup = document.getElementById("setup");
const playerSetup = document.getElementById("playerSetup");
const game = document.getElementById("game");
const results = document.getElementById("results");
const classSel = document.getElementById("classSelect");
const termSel = document.getElementById("termSelect");
const startBtn = document.getElementById("startBtn");
const addPlayerBtn = document.getElementById("addPlayerBtn");
const playerNameInput = document.getElementById("playerName");
const playersList = document.getElementById("playersList");
const playerCount = document.getElementById("playerCount");
const startGameBtn = document.getElementById("startGameBtn");
const backToSetupBtn = document.getElementById("backToSetupBtn");
const clearAllBtn = document.getElementById("clearAllBtn");
const currentPlayerName = document.getElementById("currentPlayerName");
const playerTurn = document.getElementById("playerTurn");
const roundHeader = document.getElementById("roundHeader");
const timerDisplay = document.getElementById("timerDisplay");
const charBox = document.getElementById("character");
const revealBtn = document.getElementById("revealBtn");
const startTimerBtn = document.getElementById("startTimerBtn");
const guessedBtn = document.getElementById("guessedBtn");
const nextRoundBtn = document.getElementById("nextRoundBtn");
const currentPoints = document.getElementById("currentPoints");
const scoreTableBody = document.getElementById("scoreTableBody");
const newGameBtn = document.getElementById("newGameBtn");
const changePlayersBtn = document.getElementById("changePlayersBtn");

// --- LocalStorage —Ñ—É–Ω–∫—Ü–∏—è–ª–∞—Ä—ã ---
function savePlayersToStorage() {
    localStorage.setItem('gamePlayerNames', JSON.stringify(playerNames));
}

function loadPlayersFromStorage() {
    const saved = localStorage.getItem('gamePlayerNames');
    if (saved) {
        playerNames = JSON.parse(saved);
        playerScores = new Array(playerNames.length).fill(0);
        updatePlayersList();
    }
}

function updatePlayersList() {
    playersList.innerHTML = "";
    playerNames.forEach((name, index) => {
        let li = document.createElement('li');
        li.innerHTML = `
            <span class="player-name">${name}</span>
            <button class="btn btn-danger" onclick="removePlayer(${index})">üóëÔ∏è</button>
        `;
        playersList.appendChild(li);
    });
    playerCount.textContent = playerNames.length;
    startGameBtn.disabled = playerNames.length < 2;
}

function removePlayer(index) {
    playerNames.splice(index, 1);
    playerScores.splice(index, 1);
    updatePlayersList();
    savePlayersToStorage();
}

// --- –ë–µ—Ç—Ç—ñ“£ –∂“Ø–∫—Ç–µ–ª—É—ñ ---
window.onload = () => {
    loadPlayersFromStorage();
}

// --- –≠—Ç–∞–ø 1: –∫–ª–∞—Å—Å/—Ç–æ“õ—Å–∞–Ω —Ç–∞“£–¥–∞—É ---
startBtn.onclick = () => {
    cls = classSel.value;
    term = termSel.value;
    setup.classList.add('hidden');
    playerSetup.classList.remove('hidden');
}

backToSetupBtn.onclick = () => {
    playerSetup.classList.add('hidden');
    setup.classList.remove('hidden');
}

// --- –≠—Ç–∞–ø 2: –æ–π—ã–Ω—à—ã–ª–∞—Ä–¥—ã –±–∞—Å“õ–∞—Ä—É ---
playerNameInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
        addPlayerBtn.click();
    }
});

addPlayerBtn.onclick = () => {
    let name = playerNameInput.value.trim();
    if (!name || playerNames.includes(name)) return;
    
    playerNames.push(name);
    playerScores.push(0);
    updatePlayersList();
    savePlayersToStorage();
    playerNameInput.value = "";
    playerNameInput.focus();
};

clearAllBtn.onclick = () => {
    if (confirm('–ë–∞—Ä–ª—ã“õ –æ–π—ã–Ω—à—ã–ª–∞—Ä–¥—ã –∂–æ—é –∫–µ—Ä–µ–∫ –ø–µ?')) {
        playerNames = [];
        playerScores = [];
        updatePlayersList();
        savePlayersToStorage();
    }
};

startGameBtn.onclick = () => {
    playerSetup.classList.add('hidden');
    game.classList.remove('hidden');
    currentPlayerIdx = 0;
    // Reset all scores
    playerScores = new Array(playerNames.length).fill(0);
    nextPlayer();
};

function shuffle(arr) {
    return arr.map(v=>({v, sort:Math.random()})).sort((a,b)=>a.sort-b.sort).map(({v})=>v);
}

function randomCharacter(characters) {
    const randomIndex = Math.floor(Math.random() * characters.length);
    return characters[randomIndex];
}

// --- –û–π—ã–Ω –ª–æ–≥–∏–∫–∞—Å—ã ---
function nextPlayer() {
    ch = defineCharacters();
    deck = shuffle([...ch[cls][term]]);
    score = 0;
    round = 1;
    timerRunning = false;
    currentPlayerName.textContent = playerNames[currentPlayerIdx];
    playerTurn.textContent = `${currentPlayerIdx+1}/${playerNames.length}`;
    
    // –ñ–∞“£–∞ –æ–π—ã–Ω—à—ã “Ø—à—ñ–Ω –∂–∞“£–∞ –∫–µ–π—ñ–ø–∫–µ—Ä —Ç–∞“£–¥–∞—É
    currentChar = randomCharacter(deck);
    
    startRound();
}

function startRound() {
    if (round > 5) {
        // –ï–≥–µ—Ä 5 —Ä–∞—É–Ω–¥—Ç–∞ —Ç–∞–ø–ø–∞—Å–∞
        endTurn();
        return;
    }
    
    // –¢–µ–∫ 1-—Ä–∞—É–Ω–¥—Ç–∞ “ì–∞–Ω–∞ –∂–∞“£–∞ –∫–µ–π—ñ–ø–∫–µ—Ä —Ç–∞“£–¥–∞—É
    if (round === 1 && currentChar === undefined) {
        currentChar = randomCharacter(deck);
    }
    // 2-5 —Ä–∞—É–Ω–¥—Ç–∞—Ä–¥–∞ –∫–µ–π—ñ–ø–∫–µ—Ä —Å–æ–ª –±–æ–π—ã–Ω—à–∞ “õ–∞–ª–∞–¥—ã
    
    roundHeader.textContent = `${round}-—Ä–∞—É–Ω–¥ / 5`;
    charBox.textContent = currentChar;
    charBox.classList.add("hidden-text");
    
    // –ö–Ω–æ–ø–∫–∞–ª–∞—Ä–¥—ã –±–∞–ø—Ç–∞—É
    revealBtn.disabled = false;
    startTimerBtn.disabled = false;
    startTimerBtn.textContent = "‚è∞ –¢–∞–π–º–µ—Ä–¥—ñ –±–∞—Å—Ç–∞—É"; // –ú”ô—Ç—ñ–Ω–¥—ñ “õ–∞–ª–ø—ã–Ω–∞ –∫–µ–ª—Ç—ñ—Ä—É
    guessedBtn.disabled = true;
    nextRoundBtn.disabled = true;
    
    // –¢–∞–π–º–µ—Ä–¥—ñ –±–∞–ø—Ç–∞—É
    timeLeft = roundTimes[round-1];
    timerRunning = false;
    updateTimerDisplay();
    timerDisplay.className = "timer-display";
    
    currentPoints.textContent = `–ê“ì—ã–º–¥–∞“ì—ã —Ä–∞—É–Ω–¥: ${roundScores[round-1]} “±–ø–∞–π ‚Ä¢ –£–∞“õ—ã—Ç: ${Math.floor(timeLeft/60)} –º–∏–Ω`;
    
    if (timer) {
        clearInterval(timer);
        timer = null;
    }
}

function startTimer() {
    if (timerRunning) return;
    
    timerRunning = true;
    timerDisplay.classList.add("running");
    startTimerBtn.disabled = true;
    
    timer = setInterval(() => {
        timeLeft--;
        updateTimerDisplay();
        
        if (timeLeft <= 0) {
            clearInterval(timer);
            timerDisplay.classList.remove("running");
            timerDisplay.classList.add("danger");
            guessedBtn.disabled = true;
            nextRoundBtn.disabled = false;
            startTimerBtn.textContent = "‚è∞ –£–∞“õ—ã—Ç –±—ñ—Ç—Ç—ñ!";
            startTimerBtn.disabled = true;
        } else if (timeLeft <= 30) {
            timerDisplay.classList.add("warning");
        }
    }, 1000);
}

function updateTimerDisplay() {
    let m = Math.floor(timeLeft / 60);
    let s = timeLeft % 60;
    timerDisplay.textContent = `${m}:${s.toString().padStart(2, "0")}`;
}

revealBtn.onclick = () => {
    charBox.classList.remove("hidden-text");
    guessedBtn.disabled = false;
};

startTimerBtn.onclick = () => {
    startTimer();
};

guessedBtn.onclick = () => {
    if (timer) clearInterval(timer);
    timerRunning = false;
    
    // –ï–≥–µ—Ä —É–∞“õ—ã—Ç —ñ—à—ñ–Ω–¥–µ —Ç–∞–ø—Å–∞
    playerScores[currentPlayerIdx] += roundScores[round-1];
    nextPlayerTurn();
};

nextRoundBtn.onclick = () => {
    round++;
    startRound();
};

function endTurn() {
    if (timer) clearInterval(timer);
    timerRunning = false;
    // –ï–≥–µ—Ä 5 —Ä–∞—É–Ω–¥—Ç–∞ –¥–∞ —Ç–∞–±–∞ –∞–ª–º–∞—Å–∞ - 0 –±–∞–ª–ª
    nextPlayerTurn();
}

function nextPlayerTurn() {
    game.classList.add('hidden');
    
    if (currentPlayerIdx + 1 < playerNames.length) {
        currentPlayerIdx++;
        // –ö–µ–ª–µ—Å—ñ –æ–π—ã–Ω—à—ã “Ø—à—ñ–Ω –∫–µ–π—ñ–ø–∫–µ—Ä–¥—ñ –∞–Ω—ã“õ—Ç–∞–º–∞—É (nextPlayer —Ñ—É–Ω–∫—Ü–∏—è—Å—ã–Ω–¥–∞ –æ—Ä—ã–Ω–¥–∞–ª–∞–¥—ã)
        currentChar = undefined;
        setTimeout(() => {
            game.classList.remove('hidden');
            nextPlayer();
        }, 700);
    } else {
        showResults();
    }
}

function showResults() {
    results.classList.remove('hidden');
    
    let sorted = playerNames.map((name, i) => ({name, score: playerScores[i]}))
        .sort((a, b) => b.score - a.score);
    
    scoreTableBody.innerHTML = "";
    sorted.forEach((p, i) => {
        let tr = document.createElement('tr');
        tr.innerHTML = `<td>${i+1}</td><td>${p.name}</td><td>${p.score}</td>`;
        scoreTableBody.appendChild(tr);
    });
}

newGameBtn.onclick = () => {
    results.classList.add('hidden');
    setup.classList.remove('hidden');
    
    // –¢–µ–∫ –æ–π—ã–Ω–¥—ã —ã—Å—ã—Ä—É, –æ–π—ã–Ω—à—ã–ª–∞—Ä “õ–∞–ª–∞–¥—ã
    currentPlayerIdx = 0;
    currentChar = undefined;
    if (timer) clearInterval(timer);
    timerRunning = false;
};

changePlayersBtn.onclick = () => {
    results.classList.add('hidden');
    playerSetup.classList.remove('hidden');
};